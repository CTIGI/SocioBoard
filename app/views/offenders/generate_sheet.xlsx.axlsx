wb = xlsx_package.workbook
wb.add_worksheet(name: t("views.reports.offenders_list")) do |sheet|
  header = [
    t('activerecord.attributes.offender.unit'),
    t('activerecord.attributes.offender.name'),
    t('activerecord.attributes.offender.age'),
    t('activerecord.attributes.offender.recurrent'),
    t('activerecord.attributes.offender.origin_county'),
    t('activerecord.attributes.offender.article'),
    t('views.offenders.filter_panel.currrent_period_measure_type'),
    t('activerecord.attributes.offender.measures_measure_deadline'),
    t('activerecord.attributes.offender.measure_dates')
  ]


  sheet.add_row [t("views.reports.report_data", data: Time.now.strftime('%d/%m/%Y Ã s %H:%M'))]
  sheet.add_row
  sheet.add_row [@total[0].to_a.join(" : ")]
  @counters.each {|c| sheet.add_row [ "#{c.keys[0]} : #{c.values[0]} (#{c.values[1]})" ] } unless @counters.blank?
  sheet.add_row
  sheet.add_row header

  @offenders.each do |offender|
    sheet.add_row [
      truncate_words(offender.unit.name),
      display_offender_name(offender.name, current_user),
      show_field(offender.age),
      show_field(offender.crimes.pluck(:name).join(", ")),
      "#{ActionView::Base.full_sanitizer.sanitize(period_label(offender))} - #{UnicodeUtils.upcase(measure_data(offender, :measure_type))} - #{
      (measure_data(offender, :measure_situation))}",
      measure_data(offender, :measure_deadline),
      "#{l(measure_data(offender, :start_date_measure).to_date)} - #{l(measure_data(offender, :end_date_measure).to_date)}"
    ], sz: 10
  end

  wb.apply_styles
end
